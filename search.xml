<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ant Design Logo彩蛋动画实现</title>
    <url>/Ant-Design-Logo%E5%BD%A9%E8%9B%8B%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>基于 Github Page + Hexo + Butterfly主题 的个人博客搭建教程 (Mac版)</title>
    <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>提起<strong>博客</strong>二字，似乎有一种年代感，还记得小时候玩过<a href="http://www.renren.com/">人人网</a>、<a href="https://tieba.baidu.com/index.html">百度贴吧</a>、<a href="https://qzone.qq.com/">QQ空间</a>等社交平台。然而，随着时代的推进，这些类似于<strong>个人博客</strong>的社交平台逐渐开始走向没落。各种实时互动的社交软件层出不穷，受益于此，咱们也可以很方便地联系好友，传送讯息。  </p>
<p>在这个嘈杂喧闹的世界中，或许有那么一群人会希望拥有一个属于自己的小空间。在那儿，可以记录自己的学习、心情以及生活中的各种趣事，可以无忧无虑地做自己。很幸运的是，通过一些已有的专业知识和网络上他人共享的资料，我搭建了属于自己的博客。  </p>
<p>（🤚唠叨结束，进入正题）<strong>你是否也想拥有属于自己的博客？如果心动了，就继续往下看吧！我会把整个搭建博客的流程和遇到的问题及其解决方案分享给大家。</strong>  </p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>整个过程所有配置均为<strong>免费</strong>，下面我将介绍构建博客中所使用到的平台和插件。  </p>
<h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p><strong><a href="https://github.com/">Github</a></strong> 是一个面向开源及私有软件项目的托管平台。它不仅能够让我们托管代码和各种资料，也提供了<code>Github Pages</code>的功能，允许我们<strong>利用Github的服务器部署自定义网页</strong>。  </p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p><strong><a href="https://hexo.io/zh-cn/">Hexo</a></strong> 是一款基于<a href="https://nodejs.org/en/">Node.js</a>的快速、简洁且高效的静态博客框架。它能够解析<code>Markdown</code>文件并生成静态网页，帮我们省去了构建、布局网页等繁琐过程。  </p>
<h2 id="Butterfly主题"><a href="#Butterfly主题" class="headerlink" title="Butterfly主题"></a>Butterfly主题</h2><p><strong><a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></strong> 是一款在<a href="https://github.com/Molunerfinn/hexo-theme-melody">hexo-theme-melody</a>的基础上进行开发的主题框架。简单来说，<code>Butterfly</code>主题能够帮我们美化我们的博客，使其更生动更满足我的需求。Of Course，也有很多其他主题，大家可以根据自己的需求进行选择，我在此不一一赘述。  </p>
<h1 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h1><p>介绍完我们搭建博客的环境配置后，我们需要进行一系列的准备，以便于我们后续搭建博客。  </p>
<blockquote>
<p><strong>1. 注册Github 账号</strong><br><strong>2. 安装Node.js</strong><br><strong>3. 安装Hexo</strong><br><strong>4. 配置Butterfly主题</strong>  </p>
</blockquote>
<h1 id="开始搭建我们的博客"><a href="#开始搭建我们的博客" class="headerlink" title="开始搭建我们的博客"></a>开始搭建我们的博客</h1><p>下面开始我们的搭建博客之旅～  </p>
<h2 id="注册Github账号并创建io仓库"><a href="#注册Github账号并创建io仓库" class="headerlink" title="注册Github账号并创建io仓库"></a>注册Github账号并创建io仓库</h2><p>假设大家都有一个 <strong><a href="https://github.com/">Github</a>账号</strong>，如果没有请点击链接自行注册。接着我们需要在Github页面上创建仓库。  </p>
<p>登陆账号进入Github页面之后，在右上角的头像旁边有一个 <strong>“+”</strong> 号，我们点击 <strong>New repository</strong> 即可。  </p>
<p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/newRepository.png"></p>
<p>然后我们进入创建仓库页面，并填写仓库的相关信息。<strong>注意：红色方框中填写的仓库名的形式有要求！必须是<code>username.Github.io</code>。</strong> username是你的用户名，如果像我一样有大写的话，写成大小写都可以，因为之后Github都会给你转成小写。  </p>
<p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/newRepository2.png"></p>
<blockquote>
<p>之后我们就可以在自己的仓库中找到刚刚创建的说明网页，<strong>Github也会通过 <code>username.Github.io</code> 地址提供对网页的访问</strong>。  </p>
</blockquote>
<p>我们找到刚刚创建的仓库，点击 <strong>Settings</strong>，在左侧列表中找到 <strong>Pages</strong>，就可以看到我们的仓库信息了。  </p>
<p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/repositorySettings.png"></p>
<p><strong>到这里我们的Github Pages就已经全部完成了！</strong>   </p>
<p>如果想给我们的网页<strong>更换访问链接</strong>，可以继续往下看；反之直接跳过这一部分。  </p>
<blockquote>
<p>我们可以自己注册域名指向我们这个说明网页，就不需要总是使用<code>https：//username.Github.io</code>来访问我们的博客了。下面我以<a href="https://cn.aliyun.com/">阿里云</a>为例。  </p>
<ol>
<li>购买了一个属于自己的域名，比如我的是 <code>douchen.life</code>。   </li>
<li>接着，在自己的域名下DNS解析一个<code>CNAME</code>指向你的 <code>username.Github.io</code>（简单来说就是解析域名和IP的对应关系）。  </li>
<li>然后将自己的域名地址输入到下面的 <strong>Custom domain</strong>。Github会自动帮你注册https证书。</li>
</ol>
<p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/cname.png"></p>
<p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/repositoryPage.png"></p>
</blockquote>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><strong><code>Node.js</code>是我们运行Hexo插件的基础</strong>，这里不详细赘述<a href="https://nodejs.org/en/">Node.js</a>的安装和配置过程。读者可以进入官网查阅官方文档或者自行<a href="https://www.baidu.com/">百度</a>，下面提供下载链接和教程链接，希望对你有用。  </p>
<ol>
<li><a href="http://nodejs.cn/">下载安装Node.js</a>  </li>
<li><a href="https://github.com/nswbmw/N-blog/blob/master/book/1.1%20Node.js%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md">安装Node.js教程</a></li>
</ol>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><strong><code>Hexo</code></strong> 的相关资料如下：  </p>
<blockquote>
<ol>
<li>Github: <a href="http://github.com/hexojs/hexo">http://Github.com/hexojs/hexo</a></li>
<li><a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>（多学习参考文档有利于提高我们阅读技术文档的能力）</li>
</ol>
</blockquote>
<p>下面将介绍<strong>如何安装和部署Hexo</strong>。  </p>
<p>1.首先，<strong>创建一个空文件夹或者把之前的<code>username.Github.io</code>空仓库<code>clone</code>下来</strong>，用于存放Hexo。  </p>
<p>2.然后，进入该文件夹，打开终端，利用Node.js的包管理器 <strong><code>npm</code>安装Hexo</strong>:  </p>
<ul>
<li>执行 <strong><code>npm install hexo-cli -g</code></strong> 命令安装依赖项</li>
</ul>
<blockquote>
<p>注意：使用Mac OS时，进行 -g 全局安装会报错提示权限不足。我们需要在npm命令前添加 <code>sudo</code> 以管理员身份执行, 即 <strong><code>sudo npm install hexo-cli -g</code></strong> ，之后输入密码即可。<br>。 </p>
</blockquote>
<ul>
<li>执行 <strong><code>hexo init</code></strong> 初始化该文件夹。  </li>
<li>执行 <strong><code>npm i</code></strong> 安装需要的组件。  </li>
<li>执行 <strong><code>hexo g</code></strong> 生成博客网页的静态文件。  </li>
<li>执行 <strong><code>hexo s</code></strong> 开启本地的 Hexo 服务器，接着我们在浏览器地址栏中输入<a href="http://localhost:4000/">http://localhost:4000/</a>即可打开我们的博客界面！</li>
</ul>
<blockquote>
<p>我的博客由于已经换过主题并且修改过内容了，所以你们的初始博客会是 Hexo 主题的样子  </p>
</blockquote>
<p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/localhost.png"></p>
<p>当我们已经可以在本地生成博客网页之后，我们还需要将本地的项目推送到Github Pages上，下面将介绍Mac OS下如何实现，共分为4个步骤。<strong>如果已经在本地配置好了 <code>SSH Keys</code> 则可以跳过 1 和  2</strong>。  </p>
<p><strong>1. 在本地设置Github的个人信息</strong></p>
<p>我们可以在终端中输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xxx就是你的Github用户名，比如我的是Douc1998</span></span><br><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;xxx&quot;</span> </span><br><span class="line"><span class="comment"># xxx@xxx.com就是你创建Github时用的邮箱  </span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;xxx@xxx.com&quot;</span> </span><br></pre></td></tr></table></figure>
<p><strong>2. 生成SSH Keys</strong></p>
<p>首先我们在终端中输入 <code>ls -al ~/.ssh</code> 判断一下之前有没有生成过 <code>ssh keys</code>。  </p>
<p>如果返回的结果中有 <code>id_rsa.pub</code> 文件的话，利用指令 <code>cat ~/.ssh/id_rsa.pub</code> 打开该文件，并复制内容，进入步骤3。  </p>
<p>如果没有则需要我们生成。如下：  </p>
<ul>
<li>在终端中输入指令 <code>ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</code></li>
<li>过程中会要求你输入存储的文件夹名、密码和确认密码，可以直接一路三个回车过去</li>
<li>创建成功后，输入指令 <code>open ~/.ssh</code></li>
<li>找到 <code>id_rsa.pub</code> 并打开，复制内容</li>
</ul>
<p><strong>3. Github授权SSH key</strong></p>
<p>当我们已经得到了 <code>id_rsa.pub</code> 文件的内容后，我们需要在Github中进行授权。  </p>
<p>首先打开 <strong>Settings</strong>，找到 <strong>SSH and GPG keys</strong>，新建一个SSH keys，并把复制的内容粘贴到<strong>Key</strong>中，Title随意定义即可。  </p>
<p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/sshkey.png"></p>
<p><strong>4. 推送本地项目</strong></p>
<p>我们打开之前初始化好了的 Hexo 文件夹，其内部大体结构是这样的：<br>（此处参考了 <strong>SYZ师兄</strong> 的博客，他对这部分的讲解更为详细 👉 <a href="https://sunyunzeng.com/">Windows 环境下 Hexo+Github 搭建个人博客教程</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-- node_modules</span><br><span class="line">|-- scaffolds</span><br><span class="line">|-- source</span><br><span class="line">   |-- _posts</span><br><span class="line">|-- themes</span><br><span class="line">|-- _config.landscape.yml</span><br><span class="line">|-- _config.yml</span><br><span class="line">|-- .gitignore</span><br><span class="line">|-- package.json</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>node_modules 是该项目依赖的各种包，当我们使用 <code>npm install</code>时，Node.js会根据 package.json中的依赖项安装所需的包。  </p>
</li>
<li><p>scaffolds：本意是 “脚手架” 的意思，这里引申为模板文件夹。当你 hexo new &lt;layout(布局)&gt; &lt;’title’&gt; 的时候，Hexo 会根据该文件夹下的对应文件进行初始化构建。  </p>
</li>
<li><p>source：source 文件夹将存储用户的文件资源，你的博客md文件将会存放在_posts文件夹下，其目录下的md文件，会被编译成 html 文件，放到 public 文件夹下。  </p>
</li>
<li><p>themes：主题文件夹，用于存放博客主题。  </p>
</li>
<li><p>_config.yml：博客网站的全局配置文件，包括多种描述信息，你的自定义样式修改几乎都在这里。 </p>
</li>
<li><p>_config.landscape.yml：Hexo的landscape初始主题配置文件。</p>
</li>
<li><p>.gitignore：.gitignore 文件作用是声明不被 git 记录的文件。  </p>
</li>
<li><p>package.json：框架的基本参数信息和它所依赖的插件，在 npm 安装时使用 –save 保存进去。</p>
</li>
</ul>
</blockquote>
<p>首先，我们需要修改 <code>_config.yml</code> 文件，直接跳转到文件末尾，找到<code>deploy</code>参数，设置为如下形式并保存：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/Douc1998/douc1998.github.io.git</span>  <span class="comment"># (你的仓库地址)</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># (你的分支)</span></span><br></pre></td></tr></table></figure>
<p>然后，我们需要安装依赖库：<code>npm install hexo-deployer-git --save</code>  </p>
<p>接着，我们在 Hexo文件夹下打开终端，执行 <code>hexo new post &quot;postname&quot;</code>命令即可创建我们的第一篇博客。  </p>
<blockquote>
<p>我们能够在<code>source/_posts</code>文件夹里找到 <code>postname.md</code> 文件，这就是我们的博客文件，书写是基于 Markdown 语法的，这里不多赘述，提供一篇语法教程 👉 <a href="https://www.jianshu.com/p/191d1e21f7ed">Markdown基本语法</a>  </p>
</blockquote>
<p>最后，编辑好博客内容后，我们需要将网站部署到 Github Pages上，依次执行以下命令： <code>hexo g</code> 👉 <code>hexo d</code> 实现部署。</p>
<p><strong>到此为止，你的第一篇博客就成功上传到自己的主页了！</strong></p>
<blockquote>
<p>提示：hexo d 之后就不需要 git add &#x2F; commit &#x2F; push 等一系列操作了。当然，你也可以在 Github 上新建分支，如Hexo，专门用于push文件下的其他文件。  </p>
</blockquote>
<h2 id="配置Butterfly主题"><a href="#配置Butterfly主题" class="headerlink" title="配置Butterfly主题"></a>配置Butterfly主题</h2><p>上面创建的博客主题是基于 Hexo 初始主题。如果你想使用一些其他主题，也可以自行配置，我将以 <strong>Butterfly 主题</strong>为例，简要介绍如何配置。  </p>
<ul>
<li><a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly Github</a></li>
<li><a href="https://butterfly.js.org/">Butterfly官方文档</a></li>
</ul>
<p>根据<a href="https://butterfly.js.org/">Butterfly官方文档</a>可知，我们可以直接使用 git 指令进行下载：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行命令的位置在 <strong>Hexo 文件夹的根目录下</strong>。当然，我们也可以把下载的butterfly 文件夹复制到 Hexo&#x2F;themes 路径下。  </p>
</blockquote>
<p>接着，我们还需要安装 hexo 的 pug 和 stylus 渲染器，终端执行命令：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer-pug</span> hexo<span class="literal">-renderer-stylus</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>
<p>最后，我们就是需要在 <code>Hexo/_config.yml</code> 文件中找到 <code>theme</code> 属性，设置为 <code>butterfly</code> 即可。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>
<p>我们分别执行 <code>hexo clean</code> 👉 <code>hexo g</code> 👉 <code>hexo s</code> 即可看到我们的 butterfly 主题的博客啦！确认无误即可 <code>hexo d</code> 部署到我们的 Github Pages上啦！  </p>
<blockquote>
<p><strong>小Tips</strong>: 建议把 <code>themes/butterfly/_config.yml</code> 复制一份到 Hexo 文件夹根目录下，更名为 <code>_config.butterfly.yml</code>，以后只需要修改这个yml文件即可。（这种方法可以有效避免 butterfly 主题升级带来的不便）</p>
</blockquote>
<hr>
<p><strong>很感谢你能看到这里！谢谢～</strong></p>
<hr>
<p>参考资料： (衷心感谢参考资料中各博主的帮助)</p>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/index.html">Hexo 官方文档</a>  </li>
<li><a href="https://sunyunzeng.com/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/">Windows 环境下 Hexo+Github 搭建个人博客教程</a>  </li>
<li><a href="https://zhuanlan.zhihu.com/p/161436475">Hexo 实战</a></li>
<li><a href="https://butterfly.js.org/">Butterfly官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello</title>
    <url>/Hello/</url>
    <content><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>我的第一篇blog</p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p><code>My name is DouChen</code></p>
]]></content>
  </entry>
</search>
